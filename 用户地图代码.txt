import matplotlib.pyplot as plt

# Define the user stories and their associated tasks
user_stories = {
    "Article Submission and Review": ["Frontend form", "Backend API", "Article review"],
    "Search and Retrieve Articles": ["Search functionality", "Backend retrieval", "Display results"],
    "User Ratings for Articles": ["Rating system", "Display average ratings", "Store ratings"],
    "Responsive UI": ["Responsive design", "Cross-browser testing", "Mobile navigation"],
    "Metadata Extraction (Future Feature)": ["Automatic extraction", "Display extracted data", "Testing accuracy"]
}

# Define the priority levels
priority_levels = {
    "Article Submission and Review": "High",
    "Search and Retrieve Articles": "High",
    "User Ratings for Articles": "Medium",
    "Responsive UI": "Medium",
    "Metadata Extraction (Future Feature)": "Low"
}

# Plot user story map
fig, ax = plt.subplots(figsize=(10, 6))

# Colors for different priority levels
colors = {"High": "lightgreen", "Medium": "lightblue", "Low": "lightgrey"}

# Plot each user story and its associated tasks
y = 0
for story, tasks in user_stories.items():
    # Plot user story title
    ax.text(0.5, y + 0.5, story, ha='center', va='center', fontsize=12, fontweight='bold',
            bbox=dict(facecolor=colors[priority_levels[story]], edgecolor='black', boxstyle='round,pad=0.5'))
    
    # Plot associated tasks below the story
    for i, task in enumerate(tasks):
        ax.text(1.5 + i, y, task, ha='center', va='center', fontsize=10,
                bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.3'))
    
    y -= 1  # Move down for the next story

# Set axis limits and remove axis labels
ax.set_xlim(-0.5, 4.5)
ax.set_ylim(y + 1, 1.5)
ax.axis('off')

# Add a legend for priority levels
for level, color in colors.items():
    ax.text(4.7, y + 0.5, f"{level} Priority", fontsize=10, fontweight='bold',
            bbox=dict(facecolor=color, edgecolor='black', boxstyle='round,pad=0.5'))
    y -= 0.5

# Show the plot
plt.tight_layout()
plt.show()
